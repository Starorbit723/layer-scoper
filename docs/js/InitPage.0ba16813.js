"use strict";(self["webpackChunklayerscoper"]=self["webpackChunklayerscoper"]||[]).push([[448],{3714:function(t,a,s){s.d(a,{A:function(){return r}});var i=function(){var t=this,a=t._self._c;return a("div",{staticClass:"tableview-content"},[a("div",{staticClass:"thead ellipsis clearfix",style:{display:t.tableData.tableConfig.suitable?"flex":"block"}},[t.tableData.tableConfig.suitable?t._e():a("div",t._l(t.tableData.thead,(function(s,i){return a("div",{key:s.th,staticClass:"th-item-no-suitable",style:{width:t.tableData.tableConfig.width[i]+"%"}},[t._v(t._s(s.th))])})),0),t.tableData.tableConfig.suitable?a("div",t._l(t.tableData.thead,(function(s){return a("div",{key:s.th,staticClass:"th-item-suitable"},[t._v(t._s(s.th))])})),0):t._e()]),a("div",{staticClass:"tbody"},t._l(t.tableData.tbody,(function(s,i){return a("div",{key:i,staticClass:"row clearfix"},[t.tableData.tableConfig.suitable?t._e():a("div",{staticClass:"row-inner"},t._l(s,(function(s,i){return a("div",{key:i,class:{"col-item-no-suitable":!0,focus:s.focus},style:{width:t.tableData.tableConfig.width[i]+"%"}},[a("div",{staticClass:"inner",style:{textAlign:t.tableData.tableConfig.align[i]?t.tableData.tableConfig.align[i]:"center"}},[t._v(t._s(s.txt))])])})),0),t.tableData.tableConfig.suitable?a("div",{staticClass:"row-inner"},t._l(s,(function(s,i){return a("div",{key:i,class:{"col-item-suitable":!0,focus:s.focus}},[a("div",{staticClass:"inner"},[t._v(t._s(s.txt))])])})),0):t._e()])})),0)])},l=[],n={name:"TableView",props:{a:{type:Number},tableData:{type:Object}}},e=n,c=s(1656),o=(0,c.A)(e,i,l,!1,null,"6d39cfb6",null),r=o.exports},3207:function(t,a,s){s.r(a),s.d(a,{default:function(){return x}});var i=function(){var t=this,a=t._self._c;return a("div",{staticClass:"initpage-content ls-content-wrapper"},[a("div",{staticClass:"ls-title-lv1"},[t._v("初始化")]),t._m(0),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("HTML")]),a("CodeView",{attrs:{codeText:t.initHtmlCode,codeType:"html"}}),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("引入实例")]),t._m(1),a("CodeView",{attrs:{codeText:t.initJsCode,codeType:"javascript"}}),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("初始化参数")]),a("TableView",{attrs:{tableData:t.initData}})],1)},l=[function(){var t=this,a=t._self._c;return a("div",{staticClass:"ls-text ls-top-40"},[t._v(" Layer Scoper会根据"),a("span",{staticClass:"ls-textfocus"},[t._v(" id ")]),t._v("来收录一个"),a("span",{staticClass:"ls-textfocus"},[t._v("图层(Layer)")]),t._v("，进而根据CSS类名"),a("span",{staticClass:"ls-textfocus"},[t._v("class: scoped")]),t._v("来收录该图层内的"),a("span",{staticClass:"ls-textfocus"},[t._v("区域(Scope)")]),t._v("，创建树形的数据结构。区域内的可以用于落焦的点，需要用"),a("span",{staticClass:"ls-textfocus"},[t._v("class: incontroll")]),t._v('来标识，顾名思义incontroll的含义是"受控的，可落焦的"。'),a("br"),a("br"),t._v(' 同一个图层(Layer)下的区域(Scope)大多数情况下不止一个，因此为了区分以及更新，需要给每一个区域(Scope)添加一个Attribute作为编号标识, 例如：scope="1", scope="2"。scope的传入值类型为'),a("span",{staticClass:"ls-textfocus"},[t._v("Number/Float")]),t._v("，原因自然是为了在同一个图层(Layer)内比数值大小。从页面视觉来看的话，从上到下scope值是依次增大的，但不能相同或重复。 ")])},function(){var t=this,a=t._self._c;return a("div",{staticClass:"ls-text ls-top-20"},[t._v(" Layer Scoper会通过"),a("span",{staticClass:"ls-textfocus"},[t._v(" initController() ")]),t._v("来创建根实例，完成初始化。初始化需要在"),a("span",{staticClass:"ls-textfocus"},[t._v("DOM挂载完成后")]),t._v("才能执行或者是通过"),a("span",{staticClass:"ls-textfocus"},[t._v("$nextTick(() => {})")]),t._v("下一个渲染周期来执行。 ")])}],n=s(7795),e=s(3714),c=JSON.parse('{"tableConfig":{"suitable":false,"width":[20,15,10,20,10,25],"align":["","","","","",""]},"thead":[{"th":"参数"},{"th":"参数类型"},{"th":"是否必传"},{"th":"含义"},{"th":"默认值"},{"th":"备注"}],"tbody":[[{"txt":"id"},{"txt":"String"},{"txt":"是"},{"txt":"DOM的id"},{"txt":""},{"txt":"标识一个可以落焦的图层，必传","focus":true}],[{"txt":"defaultPoint"},{"txt":"Object"},{"txt":"是"},{"txt":"该图层默认落焦点坐标"},{"txt":""},{"txt":"例：{ y: 1, x: 1 }"}],[{"txt":"defaultPoint.y"},{"txt":"Number"},{"txt":"是"},{"txt":"落焦点所在的scope值"},{"txt":"-1"},{"txt":"<div class=\'list scoped\' scoped=\'1\'></div>"}],[{"txt":"defaultPoint.x"},{"txt":"Number"},{"txt":"是"},{"txt":"落焦点所在scope的第几个位置"},{"txt":"-1"},{"txt":""}],[{"txt":"callBackFn"},{"txt":"Object"},{"txt":"否"},{"txt":"默认回调方法传入"},{"txt":""},{"txt":"默认回调方法的Function Name值是固定的"}],[{"txt":"callBackFn.cbFocusUp"},{"txt":"Function"},{"txt":"否"},{"txt":"按“上”键的默认回调方法"},{"txt":""},{"txt":""}],[{"txt":"callBackFn.cbFocusDown"},{"txt":"Function"},{"txt":"否"},{"txt":"按“下”键的默认回调方法"},{"txt":""},{"txt":""}],[{"txt":"callBackFn.cbFocusLeft"},{"txt":"Function"},{"txt":"否"},{"txt":"按“左”键的默认回调方法"},{"txt":""},{"txt":""}],[{"txt":"callBackFn.cbFocusRight"},{"txt":"Function"},{"txt":"否"},{"txt":"按“右”键的默认回调方法"},{"txt":""},{"txt":""}],[{"txt":"callBackFn.cbBackSpace"},{"txt":"Function"},{"txt":"否"},{"txt":"按“返回/后退”键的默认回调方法"},{"txt":""},{"txt":""}],[{"txt":"callBackFn.cbFocusChange"},{"txt":"Function"},{"txt":"否"},{"txt":"焦点移动默认回调方法"},{"txt":""},{"txt":"焦点每次移动后默认触发"}]]}');const o='<div id="content">\n  <div class="list scoped" scoped="1">\n    <div class="list-item incontroll">落焦点-item-1</div>\n    <div class="list-item incontroll">落焦点-item-2</div>\n    <div class="list-item incontroll">落焦点-item-3</div>\n  </div>\n  <div class="list2 scoped" scoped="2">\n    <div class="list2-item incontroll">落焦点-item-1</div>\n    <div class="list2-item">非落焦点-item-2</div>\n    <div class="list2-item">非落焦点-item-3</div>\n    <div class="list2-item incontroll">落焦点-item-4</div>\n  </div>\n  <div class="list3 scoped" scoped="2.1">\n    <div class="list3-item incontroll">落焦点-item-1</div>\n    <div class="list3-item incontroll">落焦点-item-2</div>\n    <div class="list3-item">非落焦点-item-3</div>\n  </div>\n</div>\n',r="import LayerScoper from 'layer-scoper';\n\nconst layerScoperCase = new LayerScoper();\n\n// Api: initController() 用于初始化，只需在DOM加载完成后调用一次即可\n...\nmounted() {\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 1, x: 1 },\n    callBackFn: {\n      cbFocusUp: this.onFocusUpCallback,\n      cbFocusDown: this.onFocusDownCallback,\n      cbFocusLeft: this.onFocusLeftCallback,\n      cbFocusRight: this.onFocusRightCallback,\n      cbBackSpace: this.onBackSpaceClickCallback,\n      cbFocusChange: this.onFocusChangeCallback,\n    }\n  });\n}\n...\n\n// 回调预留方法，开发者自定义，并传入初始化\n...\nmethod: {\n  onFocusUpCallback(cbData) {\n    console.log('焦点上移', cbData);\n  },\n  onFocusDownCallback(cbData) {\n    console.log('焦点下移', cbData);\n  },\n  onFocusLeftCallback(cbData) {\n    console.log('焦点左移', cbData);\n  },\n  onFocusRightCallback(cbData) {\n    console.log('焦点右移', cbData);\n  },\n  onBackSpaceClickCallback(cbData) {\n    console.log('按了后退/返回键', cbData);\n  },\n  onFocusChangeCallback(cbData) {\n    console.log('焦点移动/改变', cbData);\n  },\n}\n...\n\n";var d={name:"InitPage",components:{CodeView:n.A,TableView:e.A},data(){return{initData:c,initHtml:o,initJs:r}},computed:{initHtmlCode(){return this.initHtml},initJsCode(){return this.initJs}}},u=d,v=s(1656),b=(0,v.A)(u,i,l,!1,null,"5aaf258a",null),x=b.exports}}]);
//# sourceMappingURL=InitPage.0ba16813.js.map