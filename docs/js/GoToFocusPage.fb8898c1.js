"use strict";(self["webpackChunklayerscoper"]=self["webpackChunklayerscoper"]||[]).push([[211],{3714:function(n,t,i){i.d(t,{A:function(){return d}});var e=function(){var n=this,t=n._self._c;return t("div",{staticClass:"tableview-content"},[t("div",{staticClass:"thead ellipsis clearfix",style:{display:n.tableData.tableConfig.suitable?"flex":"block"}},[n.tableData.tableConfig.suitable?n._e():t("div",n._l(n.tableData.thead,(function(i,e){return t("div",{key:i.th,staticClass:"th-item-no-suitable",style:{width:n.tableData.tableConfig.width[e]+"%"}},[n._v(n._s(i.th))])})),0),n.tableData.tableConfig.suitable?t("div",n._l(n.tableData.thead,(function(i){return t("div",{key:i.th,staticClass:"th-item-suitable"},[n._v(n._s(i.th))])})),0):n._e()]),t("div",{staticClass:"tbody"},n._l(n.tableData.tbody,(function(i,e){return t("div",{key:e,staticClass:"row clearfix"},[n.tableData.tableConfig.suitable?n._e():t("div",{staticClass:"row-inner"},n._l(i,(function(i,e){return t("div",{key:e,class:{"col-item-no-suitable":!0,focus:i.focus},style:{width:n.tableData.tableConfig.width[e]+"%"}},[t("div",{staticClass:"inner",style:{textAlign:n.tableData.tableConfig.align[e]?n.tableData.tableConfig.align[e]:"center"}},[n._v(n._s(i.txt))])])})),0),n.tableData.tableConfig.suitable?t("div",{staticClass:"row-inner"},n._l(i,(function(i,e){return t("div",{key:e,class:{"col-item-suitable":!0,focus:i.focus}},[t("div",{staticClass:"inner"},[n._v(n._s(i.txt))])])})),0):n._e()])})),0)])},s=[],l={name:"TableView",props:{a:{type:Number},tableData:{type:Object}}},o=l,a=i(1656),c=(0,a.A)(o,e,s,!1,null,"6d39cfb6",null),d=c.exports},4361:function(n,t,i){i.r(t),i.d(t,{default:function(){return m}});var e=function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-content-wrapper"},[t("div",{staticClass:"ls-title-lv1"},[n._v("手动移动焦点")]),t("div",{staticClass:"ls-title-lv2 ls-top-30"},[n._v("goToFocus()")]),n._m(0),n._m(1),n._m(2),n._m(3),t("CodeView",{staticClass:"ls-top-40",attrs:{codeText:n.gotoFocusHtml,codeType:"html"}}),t("CodeView",{attrs:{codeText:n.gotoFocusJsCode,codeType:"javascript"}}),n._m(4),t("div",{staticClass:"ls-title-lv2 ls-top-30"},[n._v("参数文档")]),t("TableView",{staticClass:"ls-top-30",attrs:{tableData:n.goToFocusTableData}})],1)},s=[function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-text ls-top-30"},[n._v(" Layer Scoper对于"),t("span",{staticClass:"ls-textfocus"},[n._v("落焦点(Focus)")]),n._v("有自己的一套默认思路，整体上来说是按照用户的按键操作，从视觉上计算出最近的可落焦的点，并且自动移动过去。 ")])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-image ls-image50 ls-top-30"},[t("img",{attrs:{src:i(1787)}})])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-text ls-top-30"},[n._v(" 对于一些特殊的交互过程，交互设计师可能会要求开发者在某个环节"),t("span",{staticClass:"ls-textfocus"},[n._v("强制移动焦点(goToFocus)")]),n._v("到某个特殊位置，那么Layer Scoper为开发者"),t("br"),n._v("提供了一个方便快捷的Api支持。如下示例，当某个焦点不能按照常规逻辑移动，可以通过此Api来轻松实现： ")])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-image ls-image50 ls-top-30"},[t("img",{attrs:{src:i(4306)}})])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"ls-block ls-top-30"},[t("ul",{staticClass:"ls-list-content"},[t("li",[n._v("Q："),t("span",{staticClass:"ls-textfocus"},[n._v("goToFocus()")]),n._v("的调用时间点或者生命周期有限制么？"),t("br"),n._v(" A：没有任何限制，只要传入"),t("span",{staticClass:"ls-textfocus"},[n._v("targetY，targetX")]),n._v("是一个实际存在的，可受控的("),t("span",{staticClass:"ls-textfocus"},[n._v(".scope .incontroll")]),n._v(")的DOM即可。"),t("br"),n._v("     否则控制台会报错，提示开发者没有找到该点，因此要确保该DOM结构已经存在之后，再移动焦点。")]),t("li",{staticClass:"ls-top-20"},[n._v("Q："),t("span",{staticClass:"ls-textfocus"},[n._v("goToFocus()")]),n._v("支持落焦到其它没有被唤醒的图层里么？"),t("br"),n._v(" A：不支持。如果想落焦到别的图层里可以通过"),t("span",{staticClass:"ls-textfocus"},[n._v("wakeUp()")]),n._v("方法先唤醒图层并且指定希望落焦的点坐标来达到该效果。")])])])}],l=i(7795),o=i(3714),a=i(1192),c=JSON.parse('{"tableConfig":{"suitable":false,"width":[10,15,10,20,10,35],"align":["","","","","",""]},"thead":[{"th":"参数"},{"th":"参数类型"},{"th":"是否必传"},{"th":"含义"},{"th":"默认值"},{"th":"备注"}],"tbody":[[{"txt":"targetY"},{"txt":"Number"},{"txt":"是"},{"txt":"希望的落焦点所在的scope值"},{"txt":"-"},{"txt":"<div class=\'list3 scoped\' scoped=\'3\'></div>"}],[{"txt":"targetX"},{"txt":"Number"},{"txt":"是"},{"txt":"希望的落焦点所在的scope下的位置"},{"txt":"-"},{"txt":"<div class=\'list3-item incontroll\'>落焦点-item-8</div>"}]]}'),d={name:"GoToFocusPage",components:{CodeView:l.A,TableView:o.A},data(){return{goToFocusTableData:c,gotoFocusHtml:a.ND,gotoFocusJs:a.j7}},computed:{gotoFocusHtmlCode(){return this.gotoFocusHtml},gotoFocusJsCode(){return this.gotoFocusJs}}},r=d,v=i(1656),u=(0,v.A)(r,e,s,!1,null,null,null),m=u.exports},1192:function(n,t,i){i.d(t,{Bi:function(){return r},FQ:function(){return l},Hw:function(){return s},KS:function(){return e},ND:function(){return c},Q$:function(){return m},TF:function(){return o},TW:function(){return a},j7:function(){return d},lD:function(){return v},o4:function(){return u}});const e="import LayerScoper from 'layer-scoper';\n\nconst layerScoperCase = new LayerScoper();\n\n// Api: initController() 用于初始化，只需在DOM加载完成后调用一次即可\n...\nmounted() {\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 1, x: 1 },\n    needScroll: true,\n    scrollDirection: 'vertical', // horizontal vertical\n    scrollBarConfig: {\n      showScrollBar: true,\n      trackWidth: '8px',\n      trackBackground: 'rgba(255,255,255,0)',\n      trackBorderRadius: '0',\n      thumbColor: 'rgb(25, 170, 6)',\n      thumbBorderWidth: '2px',\n      thumbBorderColor: 'rgb(25, 170, 6)',\n      thumbBorderRadius: '4px',\n      thumbHoverColor: 'rgb(25, 170, 6)',\n    },\n    callBackFn: {\n      cbFocusUp: this.onFocusUpCallback,\n      cbFocusDown: this.onFocusDownCallback,\n      cbFocusLeft: this.onFocusLeftCallback,\n      cbFocusRight: this.onFocusRightCallback,\n      cbBackSpace: this.onBackSpaceClickCallback,\n      cbFocusChange: this.onFocusChangeCallback,\n    },\n    selfDefinedCallBackFn: {\n      clickMe: this.clickMeFn,\n      selfGoLeft: this.selfGoLeftFn,\n      selfGoRight: this.selfGoRightFn,\n      selfGoUp: this.selfGoUpFn,\n      selfGoDown: this.selfGoDownFn,\n    }\n  });\n}\n...\n\n// 回调预留方法，开发者自定义，并传入初始化\n...\nmethod: {\n  // 默认回调绑定的方法\n  onFocusUpCallback(cbData) {\n    console.log('焦点上移', cbData);\n  },\n  onFocusDownCallback(cbData) {\n    console.log('焦点下移', cbData);\n  },\n  onFocusLeftCallback(cbData) {\n    console.log('焦点左移', cbData);\n  },\n  onFocusRightCallback(cbData) {\n    console.log('焦点右移', cbData);\n  },\n  onBackSpaceClickCallback(cbData) {\n    console.log('按了后退/返回键', cbData);\n  },\n  onFocusChangeCallback(cbData) {\n    console.log('焦点移动/改变', cbData);\n  },\n  // 自定义回调绑定的方法\n  clickMeFn(cbData) {\n    console.log('在这个Item点击了确认', cbData);\n  },\n  selfGoLeftFn(cbData) {\n    console.log('在这个Item点击了左键', cbData);\n  },\n  selfGoRightFn(cbData) {\n    console.log('在这个Item点击了右键', cbData);\n  },\n  selfGoUpFn(cbData) {\n    console.log('在这个Item点击了上键', cbData);\n  },\n  selfGoDownFn(cbData) {\n    console.log('在这个Item点击了下键', cbData);\n  },\n}\n...\n",s='<div id="App">\n\n  \x3c!-- 主内容图层 --\x3e\n  <div id="content">\n    <div class="list scoped" scoped="1">\n      <div class="list-item incontroll">落焦点-item-1</div>\n      <div class="list-item incontroll">落焦点-item-2</div>\n      <div class="list-item incontroll">落焦点-item-3</div>\n    </div>\n    <div class="list2 scoped" scoped="2">\n      <div class="list2-item incontroll">落焦点-item-1</div>\n      <div class="list2-item">非落焦点-item-2</div>\n      <div class="list2-item">非落焦点-item-3</div>\n      <div class="list2-item incontroll">落焦点-item-4</div>\n    </div>\n    <div class="list3 scoped" scoped="2.1">\n      <div class="list3-item incontroll">落焦点-item-1</div>\n      <div class="list3-item incontroll">落焦点-item-2</div>\n      <div class="list3-item">非落焦点-item-3</div>\n    </div>\n  </div>\n\n  \x3c!-- 对话弹框图层 --\x3e\n  <div id="dialog-content" v-show="showDialog">\n    <div className=\'dialog-bg\'></div>\n    <div className=\'dialog-innerwrapper\'>\n        <div className=\'btn-zone scoped\' scoped={1}>\n          <div className=\'diabtn incontroll\' clickfocus="onCloseDialog">返回</div>\n          <div className=\'diabtn incontroll\' clickfocus="onEnsureDialog">确认</div>\n        </div>\n    </div>\n  </div>\n\n</div>\n',l="...\nmounted() {\n  layerScoperCase.addNewController({\n    id: 'dialog-content',\n    defaultPoint: { y: 1, x: 2 },\n    needScroll: false,\n    selfDefinedCallBackFn: {\n      onCloseDialog: this.onCloseDialogFn,\n      onEnsureDialog: this.onEnsureDialogFn,\n    }\n  });\n  // 展示/隐藏还是要开发者自己控制的\n  this.showDialog = true;\n}\n...\ndata() {\n  return {\n    showDialog: false\n  }\n}\n...\n// 回调预留方法，开发者自定义，并传入初始化\n...\nmethod: {\n  // 自定义回调绑定的方法\n  onEnsureDialogFn(cbData) {\n    console.log('在对话框，点击了确认', cbData);\n  },\n  onCloseDialogFn(cbData) {\n    console.log('在对话框，点击了关闭', cbData);\n  }\n}\n...\n",o='<div id="App">\n\n  \x3c!-- 主内容图层 --\x3e\n  <div id="content">\n    <div class="list scoped" scoped="1">\n      <div class="list-item incontroll">落焦点-item-1</div>\n      <div class="list-item incontroll">落焦点-item-2</div>\n    </div>\n    <div class="list2 scoped" scoped="2">\n      <div class="list2-item incontroll">落焦点-item-1</div>\n      <div class="list2-item incontroll">落焦点-item-2</div>\n      <div class="list2-item incontroll" clickfocus="openAside">落焦点-item-3</div>\n      <div class="list2-item incontroll">落焦点-item-4</div>\n    </div>\n    <div class="list3 scoped" scoped="2.1">\n      <div class="list3-item incontroll">落焦点-item-1</div>\n      <div class="list3-item incontroll">落焦点-item-2</div>\n      ...\n      <div class="list3-item incontroll"">落焦点-item-12</div>\n    </div>\n  </div>\n\n  \x3c!-- 侧浮层图层 --\x3e\n  <div id="aside-content" v-show="showAside">\n    <div className=\'aside-bg\'></div>\n    <div className=\'aside-innerwrapper\'>\n      <div class="list scoped" scoped="1">\n        <div class="list-item incontroll">落焦点-item-1</div>\n        <div class="list-item incontroll">落焦点-item-2</div>\n      </div>\n      <div class="list2 scoped" scoped="2">\n        <div class="list-item incontroll">落焦点-item2-1</div>\n        <div class="list-item incontroll" clickfocus="closeAside">落焦点-item2-2</div>\n        <div class="list-item incontroll">落焦点-item2-3</div>\n        <div class="list-item incontroll">落焦点-item2-4</div>\n      </div>\n    </div>\n  </div>\n\n</div>\n',a="...\nmounted() {\n  // 初始化\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 1, x: 1 },\n    needScroll: false,\n    selfDefinedCallBackFn: {\n      openAside: this.openAsideFn,\n    }\n  });\n\n  // 添加新的图层\n  layerScoperCase.addNewController({\n    id: 'aside-content',\n    defaultPoint: { y: 1, x: 1 },\n    needScroll: false,\n    selfDefinedCallBackFn: {\n      closeAside: closeAsideFn,\n    }\n  });\n  \n}\n...\ndata() {\n  return {\n    showAside: false\n  }\n}\n...\n// 回调预留方法，开发者自定义，并传入初始化\n...\nmethod: {\n  // 点击打开侧浮层\n  openAsideFn(cbData) {\n    // 展示/隐藏还是要开发者自己控制的\n    this.showAside = true;\n    // 唤醒该图层\n    layerScoperCase.wakeUp({\n      id: 'aside-content',\n      targetY: 2,\n      targetX: 2\n    });\n  },\n  // 点击关闭侧浮层\n  closeAsideFn(cbData) {\n    // 展示/隐藏还是要开发者自己控制的\n    this.showAside = false;\n    // 唤醒之前的页面主体图层\n    layerScoperCase.wakeUp({\n      id: 'content'\n    });\n  }\n}\n...\n",c='<div id="App">\n\n  \x3c!-- 主内容图层 --\x3e\n  <div id="content">\n    <div class="list scoped" scoped="1">\n      <div class="list-item incontroll">落焦点-item-1</div>\n      <div class="list-item incontroll">落焦点-item-2</div>\n    </div>\n    <div class="list2 scoped" scoped="2">\n      <div class="list2-item incontroll">落焦点-item-1</div>\n      <div class="list2-item incontroll">落焦点-item-2</div>\n      <div class="list2-item incontroll" clickfocus="handleChangeFocus">落焦点-item-3</div>\n      <div class="list2-item incontroll">落焦点-item-4</div>\n    </div>\n    <div class="list3 scoped" scoped="3">\n      <div class="list3-item incontroll">落焦点-item-1</div>\n      <div class="list3-item incontroll">落焦点-item-2</div>\n      ...\n      <div class="list3-item incontroll">落焦点-item-7</div>\n      <div class="list3-item incontroll">落焦点-item-8</div>\n      ...\n      <div class="list3-item incontroll"">落焦点-item-12</div>\n    </div>\n  </div>\n\n</div>\n',d="...\nmounted() {\n  // 初始化\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 2, x: 3 },\n    needScroll: false,\n    selfDefinedCallBackFn: {\n      handleChangeFocus: this.handleChangeFocusFn,\n    }\n  });\n}\n...\nmethod: {\n  // 当【落焦点-item-3】点击确认时，手动移动焦点到指定位置\n  handleChangeFocusFn(cbData) {\n    layerScoperCase.goToFocus({\n      targetY: 3,\n      targetX: 8,\n    });\n  }\n}\n...\n",r='<div id="App">\n\n  \x3c!-- 主内容图层 --\x3e\n  <div id="content">\n    <div class="list scoped" scoped="1">\n      <div class="list-item incontroll">落焦点-item-1</div>\n      <div class="list-item incontroll">落焦点-item-2</div>\n    </div>\n    <div class="list2 scoped" scoped="2">\n      <div class="list2-item incontroll">落焦点-item-1</div>\n      <div class="list2-item incontroll">落焦点-item-2</div>\n      <div class="list2-item incontroll focus">落焦点-item-3</div>\n      <div class="list2-item incontroll">落焦点-item-4</div>\n    </div>\n    <div class="list3 scoped" scoped="3">\n      <div class="list3-item incontroll">落焦点-item-1</div>\n      <div class="list3-item incontroll">落焦点-item-2</div>\n      ...\n      <div class="list3-item incontroll"">落焦点-item-12</div>\n    </div>\n  </div>\n\n</div>\n',v="...\nmounted() {\n  // 初始化\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 2, x: 3 },\n    needScroll: false\n  });\n  this.getCurrentFocusInfo();\n}\n...\nmethod: {\n  // 手动查询当前坐标\n  getCurrentFocusInfo() {\n    console.log('当前焦点信息 ===>', layerScoperCase.getLocationInfo());\n  }\n}\n...\n\n/*\n  控制台输出:  当前焦点信息 ===> { currentX: 3, currentY: 2, lastX: -1, lastY: -1 }\n  由于没有上一个落焦点，所以上一个点坐标都是-1\n*/ \n\n",u='<div id="App">\n\n  \x3c!-- 主内容图层 --\x3e\n  <div id="content">\n    \x3c!-- Tab切换导航 --\x3e\n    <div class="tab-list scoped" scoped="1">\n      <div class="list-item incontroll selected">Tab-item-1</div>\n      <div class="list-item incontroll">Tab-item-2</div>\n      <div class="list-item incontroll">Tab-item-3</div>\n    </div>\n\n    <div class="content-list scoped" scoped="2">\n      \x3c!-- Tab对应的内容 --\x3e\n      <ul>\n        <li v-for="item in pageData[currentTab].dataList" class="list-item incontroll">{{item.name}}</li>\n      </ul>\n    </div>\n\n  </div>\n\n</div>\n',m="...\ndata () {\n  return {\n    currentTab: 0,\n    pageData: [\n      {\n        name: 'Tab-item-1',\n        dataList: [\n          { name:'content-item-1-1' },\n          ...\n        ]\n      },{\n        name: 'Tab-item-2',\n        dataList: [\n          { name:'content-item-2-1' },\n          ...\n        ]\n      },{\n        name: 'Tab-item-3',\n        dataList: [\n          { name:'content-item-3-1' },\n          ...\n        ]\n      }\n    ]\n  }\n},\nmounted() {\n  // 初始化\n  layerScoperCase.initController({\n    id: 'content',\n    defaultPoint: { y: 1, x: 1 },\n    needScroll: true,\n    scrollDirection: 'vertical'\n  });\n\n  // 默认是第一个Tab被选中\n  layerScoperCase.setScopeSelectedItem({\n    id: 'content',\n    targetY: 1,\n    targetX: 1,\n  });\n\n\n  // 模拟一下：5秒后触发一次页面Tab切换\n  setTimeout(() => {\n    // 切换到第二个TAB，添加一个css: selected，同时移除之前元素的selected\n    layerScoperCase.setScopeSelectedItem({\n      id: 'content',\n      targetY: 1,\n      targetX: 2,\n    });\n\n    // 切换显示的内容数据, 更新DOM\n    this.currentTab = 1;\n\n    // DOM更新后，要调用update() 方法来通知更新layerScoperCase数据\n    this.$nextTick(() => {\n\n      layerScoperCase.update({\n        id: 'content',\n        needUpdateScoped: 2,\n      });\n\n      // 切换TAB后指定落焦到第三个Item\n      layerScoperCase.goToFocus({\n        targetY: 2,\n        targetX: 3,\n      });\n\n    });\n  }, 5000);\n}\n\n...\n\n"},1787:function(n,t,i){n.exports=i.p+"img/layer-example6.01d1b583.png"},4306:function(n,t,i){n.exports=i.p+"img/layer-example7.ffbb2b7f.png"}}]);
//# sourceMappingURL=GoToFocusPage.fb8898c1.js.map