"use strict";(self["webpackChunklayerscoper"]=self["webpackChunklayerscoper"]||[]).push([[639],{3714:function(t,a,n){n.d(a,{A:function(){return d}});var e=function(){var t=this,a=t._self._c;return a("div",{staticClass:"tableview-content"},[a("div",{staticClass:"thead ellipsis clearfix",style:{display:t.tableData.tableConfig.suitable?"flex":"block"}},[t.tableData.tableConfig.suitable?t._e():a("div",t._l(t.tableData.thead,(function(n,e){return a("div",{key:n.th,staticClass:"th-item-no-suitable",style:{width:t.tableData.tableConfig.width[e]+"%"}},[t._v(t._s(n.th))])})),0),t.tableData.tableConfig.suitable?a("div",t._l(t.tableData.thead,(function(n){return a("div",{key:n.th,staticClass:"th-item-suitable"},[t._v(t._s(n.th))])})),0):t._e()]),a("div",{staticClass:"tbody"},t._l(t.tableData.tbody,(function(n,e){return a("div",{key:e,staticClass:"row clearfix"},[t.tableData.tableConfig.suitable?t._e():a("div",{staticClass:"row-inner"},t._l(n,(function(n,e){return a("div",{key:e,class:{"col-item-no-suitable":!0,focus:n.focus},style:{width:t.tableData.tableConfig.width[e]+"%"}},[a("div",{staticClass:"inner",style:{textAlign:t.tableData.tableConfig.align[e]?t.tableData.tableConfig.align[e]:"center"}},[t._v(t._s(n.txt))])])})),0),t.tableData.tableConfig.suitable?a("div",{staticClass:"row-inner"},t._l(n,(function(n,e){return a("div",{key:e,class:{"col-item-suitable":!0,focus:n.focus}},[a("div",{staticClass:"inner"},[t._v(t._s(n.txt))])])})),0):t._e()])})),0)])},l=[],i={name:"TableView",props:{a:{type:Number},tableData:{type:Object}}},s=i,c=n(1656),o=(0,c.A)(s,e,l,!1,null,"6d39cfb6",null),d=o.exports},2668:function(t,a,n){n.r(a),n.d(a,{default:function(){return C}});var e=function(){var t=this,a=t._self._c;return a("div",{staticClass:"callbackpage-content ls-content-wrapper"},[a("div",{staticClass:"ls-title-lv1"},[t._v("回调信息")]),t._m(0),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("HTML")]),a("CodeView",{attrs:{codeText:t.dataHtmlCode,codeType:"html"}}),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("绑定数据到节点")]),a("CodeView",{attrs:{codeText:t.dataJs,codeType:"javascript"}}),a("div",{staticClass:"ls-title-lv2 ls-top-30"},[t._v("cbData - 你要的都给你")]),a("TableView",{attrs:{tableData:t.callbackData}})],1)},l=[function(){var t=this,a=t._self._c;return a("div",{staticClass:"ls-text ls-top-40"},[t._v(" 当某个节点的"),a("span",{staticClass:"ls-textfocus"},[t._v("事件绑定(EventBind)")]),t._v("被触发时，开发者可以根据绑定到该节点的数据来进行后续的操作。"),a("br"),t._v(" Layer Scoper在这方面给开发者返回了充足的节点信息，让开发者随时随地保持逻辑上的可控于灵活。 ")])}],i=n(792),s=n(3714),c=n(5741),o=JSON.parse('{"tableConfig":{"suitable":false,"width":[20,15,30,35],"align":["","","","left"]},"thead":[{"th":"参数"},{"th":"参数类型"},{"th":"含义"},{"th":"备注"}],"tbody":[[{"txt":"locationName"},{"txt":"String"},{"txt":"坐标点的名称"},{"txt":"每一个可落焦的节点都有唯一的名称，名称的组成是ln_y_x(例如：ln_3_1)，y其实是该DOM所在的scope的值，x是该DOM所在scoped的第几个位置"}],[{"txt":"currentY"},{"txt":"Number"},{"txt":"当前焦点的Scoped值"},{"txt":"类似于落焦点的纵坐标"}],[{"txt":"currentX"},{"txt":"Number"},{"txt":"当前焦点所在的Scoped中的位置"},{"txt":"类似于落焦点的横坐标"}],[{"txt":"lastY"},{"txt":"Number"},{"txt":"同图层内的，上一次焦点的Scoped值"},{"txt":"没有之前的焦点记录时，返回-1"}],[{"txt":"lastX"},{"txt":"Number"},{"txt":"同图层内的，上一次焦点所在的Scoped中的位置"},{"txt":"没有之前的焦点记录时，返回-1"}],[{"txt":"isBoundary"},{"txt":"Boolean"},{"txt":"该操作是否触碰到边界"},{"txt":""}],[{"txt":"dataSource"},{"txt":"Object"},{"txt":"绑定到该DOM节点的数据"},{"txt":"绑定的数据是JSON，但是Layer Scoper拥有强大的服务意识，会在返回给开发者数据时统一转回成Object，可直接使用"}]]}'),d={name:"CallbackPage",components:{CodeView:i.A,TableView:s.A},data(){return{dataHtml:c.C,dataJs:c.w,callbackData:o}},computed:{dataHtmlCode(){return this.dataHtml},dataJsCode(){return this.dataJs}}},r=d,b=n(1656),u=(0,b.A)(r,e,l,!1,null,null,null),C=u.exports},5741:function(t,a,n){n.d(a,{C:function(){return e},w:function(){return l}});const e='\x3c!--\n  Attribute只能接收字符串，因此binddata只能传字符串类型，为了保证数据的类型不会在绑定过程中改变，建议使用Object包裹\n--\x3e\n<div id="content">\n  <div class="list scoped" scoped="1">\n    <div class="list-item incontroll" binddata={JSON.stringify(dataObject1)}>落焦点-item-1</div>\n    <div class="list-item incontroll" binddata={JSON.stringify(dataObject2)}>落焦点-item-2</div>\n  </div>\n  <div class="list2 scoped" scoped="2">\n    <div\n      v-for="item in dataList"\n      :key="item.id"\n      class="list-item incontroll"\n      binddata={JSON.stringify(item)}>{{item.name}}</div>\n  </div>\n</div>\n',l="import { ScopeController } from 'utils/scopeController';\n\nconst controllerCase = new ScopeController();\n...\ndata() {\n  return {\n    dataObject1: {\n      id: 1,\n      age: 23,\n    },\n    dataObject2: {\n      id: 2,\n      sex: \"male\"\n    },\n    dataList: [{\n      id: 4,\n      name: \"Jack\"\n    },{\n      id: 5,\n      name: \"Tom\"\n    },{\n      id: 6,\n      name: \"Michael\"\n    }]\n  }\n}\n\n// Api: initController() 用于初始化，只需在DOM加载完成后调用一次即可\n...\nmounted() {\n  controllerCase.initController({\n    id: 'content',\n    defaultPoint: { y: 1, x: 1 },\n    callBackFn: {\n      cbFocusUp: this.onFocusUpCallback,\n      cbFocusDown: this.onFocusDownCallback,\n      cbFocusLeft: this.onFocusLeftCallback,\n      cbFocusRight: this.onFocusRightCallback,\n      cbBackSpace: this.onBackSpaceClickCallback,\n      cbFocusChange: this.onFocusChangeCallback,\n    }\n  });\n}\n...\n\n// 回调预留方法，开发者自定义，并传入初始化\n...\nmethod: {\n  // 默认回调绑定的方法\n  onFocusUpCallback(cbData) {\n    console.log('焦点上移', cbData.);\n  },\n  onFocusDownCallback(cbData) {\n    console.log('焦点下移', cbData);\n  },\n  onFocusLeftCallback(cbData) {\n    console.log('焦点左移', cbData);\n  },\n  onFocusRightCallback(cbData) {\n    console.log('焦点右移', cbData);\n  },\n  onBackSpaceClickCallback(cbData) {\n    console.log('按了后退/返回键', cbData);\n  },\n  onFocusChangeCallback(cbData) {\n    console.log('焦点移动/改变', cbData);\n  },\n}\n...\n\n"}}]);
//# sourceMappingURL=CallbackPage.eaddbc7c.js.map