{"version":3,"file":"js/EventBindPage.a5c266e9.js","mappings":"kKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,wCAAwC,CAACF,EAAG,MAAM,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,UAAUL,EAAIM,GAAG,GAAGN,EAAIM,GAAG,GAAGJ,EAAG,MAAM,CAACE,YAAY,0BAA0B,CAACJ,EAAIK,GAAG,UAAUH,EAAG,WAAW,CAACK,MAAM,CAAC,SAAWP,EAAIQ,cAAc,SAAW,UAAUN,EAAG,MAAM,CAACE,YAAY,0BAA0B,CAACJ,EAAIK,GAAG,aAAaH,EAAG,WAAW,CAACK,MAAM,CAAC,SAAWP,EAAIS,YAAY,SAAW,gBAAgBT,EAAIM,GAAG,IAAI,EACpf,EACII,EAAkB,CAAC,WAAY,IAAIV,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,qBAAqB,CAACJ,EAAIK,GAAG,+EAA+EH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,wBAAwBL,EAAIK,GAAG,8BAA8BH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,eAAeL,EAAIK,GAAG,yBAC1X,EAAE,WAAY,IAAIL,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,sBAAsB,CAACF,EAAG,MAAM,CAACE,YAAY,WAAW,CAACF,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,gBAAgBL,EAAIK,GAAG,+BAA+BH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,cAAcL,EAAIK,GAAG,WAAWH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,cAAcL,EAAIK,GAAG,mDAAuDH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,2BAA2BL,EAAIK,GAAG,yBAA2BH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,cAAcL,EAAIK,GAAG,aAChmB,EAAE,WAAY,IAAIL,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,qBAAqB,CAACJ,EAAIK,GAAG,uDAAuDH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,YAAYL,EAAIK,GAAG,OAAOH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,uBAAuBL,EAAIK,GAAG,wBAAwBH,EAAG,OAAO,CAACE,YAAY,gBAAgB,CAACJ,EAAIK,GAAG,2CAA2CL,EAAIK,GAAG,kDAC3a,G,UCLO,MAAMM,EAAa,0tBAmBbC,EAAW,mqDCOxB,OACAC,KAAA,gBACAC,WAAA,CACAC,SAAAA,EAAAA,GAGAC,IAAAA,GACA,OACAL,UAAA,EACAC,QAAAA,EAEA,EACAK,SAAA,CACAT,aAAAA,GACA,YAAAG,SACA,EACAF,WAAAA,GACA,YAAAG,OACA,IC5C4P,I,UCOxPM,GAAY,OACd,EACAnB,EACAW,GACA,EACA,KACA,KACA,MAIF,EAAeQ,EAAiB,O","sources":["webpack://layerscoper/./src/pages/EventBindPage.vue","webpack://layerscoper/./src/configData/eventbind/eventBindData.js","webpack://layerscoper/src/pages/EventBindPage.vue","webpack://layerscoper/./src/pages/EventBindPage.vue?e619","webpack://layerscoper/./src/pages/EventBindPage.vue?c54c"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"eventpage-content ls-content-wrapper\"},[_c('div',{staticClass:\"ls-title-lv1\"},[_vm._v(\"事件绑定\")]),_vm._m(0),_vm._m(1),_c('div',{staticClass:\"ls-title-lv2 ls-top-30\"},[_vm._v(\"HTML\")]),_c('CodeView',{attrs:{\"codeText\":_vm.eventHtmlCode,\"codeType\":'html'}}),_c('div',{staticClass:\"ls-title-lv2 ls-top-30\"},[_vm._v(\"初始化绑定事件\")]),_c('CodeView',{attrs:{\"codeText\":_vm.eventJsCode,\"codeType\":'javascript'}}),_vm._m(2)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"ls-text ls-top-40\"},[_vm._v(\" Layer Scoper会根据内置的属性来绑定事件，便于开发者来通过事件去驱动产品功能和逻辑。由于面向的使用场景大都是非触控型设备，事件主要都集中在\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"“上、下、左、右等方向，确认，返回”\")]),_vm._v(\"这几个按键上。Layer Scoper提供了很灵活的\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"Attribute\")]),_vm._v(\"绑定自定义方法以及接入方法，代码如下： \")])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"ls-block ls-top-20\"},[_c('div',{staticClass:\"ls-text\"},[_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"Attribute \")]),_vm._v(\"作为Html的原生属性，可以绑定一个属性值，但只能接受\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\" String \")]),_vm._v(\"类型，不能传入\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"Function\")]),_vm._v(\"。因此绑定属性的值，其实是一个方法的\\\"命名\\\"，真正的方法是在初始化时根据\\\"命名\\\"值对应来传入到\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"selfDefinedCallBackFn\")]),_vm._v(\"中，当触发回调时根据\\\"命名\\\"值来找到对应的\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"Function\")]),_vm._v(\"触发回调。 \")])])\n},function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"ls-text ls-top-30\"},[_vm._v(\" 要注意的是，当一个DOM节点绑定了一个自定义的方法时，对应同类操作默认的回调就不会再触发了，例如：当\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"goleft\")]),_vm._v(\"绑定了\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"this.selfGoLeftFn\")]),_vm._v(\"这个自定义方法时，同样作为“左键”事件的\"),_c('span',{staticClass:\"ls-textfocus\"},[_vm._v(\"cbFocusLeft: this.onFocusLeftCallback\")]),_vm._v(\"就不会触发了。自定义方法的优先级是高于默认回调的，也是留给开发者一个完全自主控制的空间。 \")])\n}]\n\nexport { render, staticRenderFns }","export const eventHtml = `<!--\r\n  clickMe selfGoLeft selfGoRight selfGoUp selfGoDown 都是字符串，\r\n  作为一个Key值，可以在selfDefinedCallBackFn中找到对应的方法\r\n-->\r\n<div id=\"content\">\r\n  <div class=\"list scoped\" scoped=\"1\">\r\n    <div class=\"list-item incontroll\" clickfocus=\"clickMe\">落焦点-item-1</div>\r\n    <div class=\"list-item incontroll\" goleft=\"selfGoLeft\" goright=\"selfGoRight\">落焦点-item-2</div>\r\n    <div class=\"list-item incontroll\" goup=\"selfGoUp\" godown=\"selfGoDown\">落焦点-item-3</div>\r\n  </div>\r\n  <div class=\"list2 scoped\" scoped=\"2\">\r\n    <div class=\"list2-item incontroll\">落焦点-item-1</div>\r\n    <div class=\"list2-item\">非落焦点-item-2</div>\r\n    <div class=\"list2-item\">非落焦点-item-3</div>\r\n    <div class=\"list2-item incontroll\">落焦点-item-4</div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport const eventJs = `import LayerScoper from 'layer-scoper';\r\n\r\nconst layerScoperCase = new LayerScoper();\r\n\r\n// Api: initController() 用于初始化，只需在DOM加载完成后调用一次即可\r\n...\r\nmounted() {\r\n  layerScoperCase.initController({\r\n    id: 'content',\r\n    defaultPoint: { y: 1, x: 1 },\r\n    callBackFn: {\r\n      cbFocusUp: this.onFocusUpCallback,\r\n      cbFocusDown: this.onFocusDownCallback,\r\n      cbFocusLeft: this.onFocusLeftCallback,\r\n      cbFocusRight: this.onFocusRightCallback,\r\n      cbBackSpace: this.onBackSpaceClickCallback,\r\n      cbFocusChange: this.onFocusChangeCallback,\r\n    },\r\n    selfDefinedCallBackFn: {\r\n      clickMe: this.clickMeFn,\r\n      selfGoLeft: this.selfGoLeftFn,\r\n      selfGoRight: this.selfGoRightFn,\r\n      selfGoUp: this.selfGoUpFn,\r\n      selfGoDown: this.selfGoDownFn,\r\n    },\r\n  });\r\n}\r\n...\r\n\r\n// 回调预留方法，开发者自定义，并传入初始化\r\n...\r\nmethod: {\r\n  // 默认回调绑定的方法\r\n  onFocusUpCallback(cbData) {\r\n    console.log('焦点上移', cbData);\r\n  },\r\n  onFocusDownCallback(cbData) {\r\n    console.log('焦点下移', cbData);\r\n  },\r\n  onFocusLeftCallback(cbData) {\r\n    console.log('焦点左移', cbData);\r\n  },\r\n  onFocusRightCallback(cbData) {\r\n    console.log('焦点右移', cbData);\r\n  },\r\n  onBackSpaceClickCallback(cbData) {\r\n    console.log('按了后退/返回键', cbData);\r\n  },\r\n  onFocusChangeCallback(cbData) {\r\n    console.log('焦点移动/改变', cbData);\r\n  },\r\n  // 自定义回调绑定的方法\r\n  clickMeFn(cbData) {\r\n    console.log('在这个Item点击了确认', cbData);\r\n  },\r\n  selfGoLeftFn(cbData) {\r\n    console.log('在这个Item点击了左键', cbData);\r\n  },\r\n  selfGoRightFn(cbData) {\r\n    console.log('在这个Item点击了右键', cbData);\r\n  },\r\n  selfGoUpFn(cbData) {\r\n    console.log('在这个Item点击了上键', cbData);\r\n  },\r\n  selfGoDownFn(cbData) {\r\n    console.log('在这个Item点击了下键', cbData);\r\n  },\r\n}\r\n...\r\n\r\n`;","<template>\r\n  <div class=\"eventpage-content ls-content-wrapper\">\r\n    <div class=\"ls-title-lv1\">事件绑定</div>\r\n    <div class=\"ls-text ls-top-40\">\r\n      Layer Scoper会根据内置的属性来绑定事件，便于开发者来通过事件去驱动产品功能和逻辑。由于面向的使用场景大都是非触控型设备，事件主要都集中在<span class=\"ls-textfocus\">“上、下、左、右等方向，确认，返回”</span>这几个按键上。Layer Scoper提供了很灵活的<span class=\"ls-textfocus\">Attribute</span>绑定自定义方法以及接入方法，代码如下：\r\n    </div>\r\n    <div class=\"ls-block ls-top-20\">\r\n      <div class=\"ls-text\">\r\n        <span class=\"ls-textfocus\">Attribute </span>作为Html的原生属性，可以绑定一个属性值，但只能接受<span class=\"ls-textfocus\"> String </span>类型，不能传入<span class=\"ls-textfocus\">Function</span>。因此绑定属性的值，其实是一个方法的\"命名\"，真正的方法是在初始化时根据\"命名\"值对应来传入到<span class=\"ls-textfocus\">selfDefinedCallBackFn</span>中，当触发回调时根据\"命名\"值来找到对应的<span class=\"ls-textfocus\">Function</span>触发回调。\r\n      </div>\r\n    </div>\r\n    <div class=\"ls-title-lv2 ls-top-30\">HTML</div>\r\n    <CodeView :codeText=\"eventHtmlCode\" :codeType=\"'html'\"></CodeView>\r\n    <div class=\"ls-title-lv2 ls-top-30\">初始化绑定事件</div>\r\n    <CodeView :codeText=\"eventJsCode\" :codeType=\"'javascript'\"></CodeView>\r\n    <div class=\"ls-text ls-top-30\">\r\n      要注意的是，当一个DOM节点绑定了一个自定义的方法时，对应同类操作默认的回调就不会再触发了，例如：当<span class=\"ls-textfocus\">goleft</span>绑定了<span class=\"ls-textfocus\">this.selfGoLeftFn</span>这个自定义方法时，同样作为“左键”事件的<span class=\"ls-textfocus\">cbFocusLeft: this.onFocusLeftCallback</span>就不会触发了。自定义方法的优先级是高于默认回调的，也是留给开发者一个完全自主控制的空间。\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CodeView from '@/components/CodeView.vue';\r\n// import TableView from \"@/components/TableView.vue\";\r\nimport { eventHtml, eventJs } from '@/configData/eventbind/eventBindData.js';\r\n\r\nexport default {\r\n  name: 'EventBindPage',\r\n  components: {\r\n    CodeView,\r\n    // TableView,\r\n  },\r\n  data() {\r\n    return {\r\n      eventHtml,\r\n      eventJs,\r\n    }\r\n  },\r\n  computed: {\r\n    eventHtmlCode() {\r\n      return this.eventHtml;\r\n    },\r\n    eventJsCode() {\r\n      return this.eventJs;\r\n    },\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n</style>","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EventBindPage.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./EventBindPage.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./EventBindPage.vue?vue&type=template&id=4925d5d4\"\nimport script from \"./EventBindPage.vue?vue&type=script&lang=js\"\nexport * from \"./EventBindPage.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","staticClass","_v","_m","attrs","eventHtmlCode","eventJsCode","staticRenderFns","eventHtml","eventJs","name","components","CodeView","data","computed","component"],"sourceRoot":""}